fake :)
docker build
docker run | docker container create
docker images


sudo docker ps


# Start a Docker container locally
# The -d parameter is short for --detach and says we want to run it in the background, 
# and -P tells Docker to publish it on the ports that we exposed (in this case, 8080).
# Notice also that when it comes to the ports, even though the container 
# is listening on port 80, that’s just an internal port; Docker has specified an external por

sudo docker run -d -P sample-app-image
sudo docker run -d -P --name pythontest sample-app-image
sudo docker run -d -p 8080:80 --name pythontest sample-app-image  # run with port forward, more predictable

# login to container
sudo docker exec -it pythontest /bin/sh
# exit 

sudo docker stop pythontest
sudo docker rm pythontest
sudo docker ps

#### Save a Docker image to a registry { login, run cntainer, give tag, push container}
sudo docker login
sudo docker commit pythontest sample-app

# Next we need to give this image a tag. The tag takes the form of:
# <repository>/<imagename>:<tag>

sudo docker tag sample-app devnetstudent/sample-app:v1
sudo docker push devnetstudent/sample-app:v1
sudo docker images








#Dockerfile example
FROM ubuntu



# What we're doing here is building an image using a Dockerfile in the current directory (.) and giving a name, or "tag", of myubuntu.
docker build -t myubuntu
docker run -it myubuntu /bin/sh
ls -al



# Example Python environment with docker
# ... invokes a Debian Linux-based default image from Docker Hub, 
# with the latest version of Python installed. 
# Let's assume your app is saved as sample-app.py. 
# We can then tell Docker to create the /home/ubuntu directory and copy sample-app.py to the container:

FROM python
WORKDIR /home/ubuntu
COPY ./sample-app.py /home/ubuntu/.
RUN pip install flask
CMD python /home/ubuntu/sample-app.py
EXPOSE 8080

# Now that we’ve defined what we want our image to be, we need to go ahead and build it:
sudo docker build -t sample-app-image .

#https://docs.docker.com/engine/reference/builder/
Currently a list of available commands looks like this:

FROM
MAINTAINER
RUN
CMD
EXPOSE
ENV
COPY
ENTRYPOINT
VOLUME
USER
WORKDIR
ARG
ONBUILD
STOPSIGNAL
LABEL