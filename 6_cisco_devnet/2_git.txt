git config --global key value
git config --global user.name "<user's name>"
git config --global user.email "<user's email>"


git init <project dir>

git clone <repository> [target directory]

cd <project dir>
git status

git diff <file> #shows changes between file in working dir and last commit
git diff <commit ID> <file>

# add multiple files to staging area
git add <file path 1> <file path n>
git add .


#delete file from git repository
git rm <file path 1> <file path n>

#add specified files to be removed to the staging area without removing the files itself from working dir
#This command will not work if the file is already in the staging area with changes.

git rm --cached <file path 1> <file path n>

# second option, equivalent of first one, but file will not be preserved in working dir
rm <file path 1> <file path n>
git add <file path 1> <file path n>

git commit
git commit -m "message"


git push
git push origin <branch name>
git push origin master

git pull / fetch
git pull origin
git pull origin <branch>


## List branches
git branch
git branch --list

# Create git branch
git branch <parent branch> <branch name>

git checkout -b <parent branch> <branch name>

# Delete a branch
git branch -d <branch name>

# merge branches
# During a merge, only the target branch is modified.
#### FAST-FORWARD MERGE, is when the Git algorithm is able to apply the changes/commits from the source branches
to the target branch automatically and without conflits.

# Merge a branch into the clients current branch/repository
git merge <branch name>  # <branch name> si the source branch that is being merged itnto the current branch


# to merge a branch into a branch that is not the clients current branch/repository
# 
#
git checkout <target branch name>
git merge <source branch name>

# OCTOPUS MERGE, Merge multiple branches into the clients current branch/repository
git merge <branch name 1> .. <branch name n>

### research unified diff, .diff file

# GIT tshoot
git config -l
git remove -v

test 2